'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/* eslint-disable no-undef */
/* eslint-disable no-console */
/* eslint-disable no-lonely-if */

var AnyControl = function AnyControl() {
  var _this = this;

  var SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;
  this.recognition = new SpeechRecognition();
  this.finalTranscript = '';
  this.commands = {};
  this.DEBUG = false;
  this.recognizing = false;
  this.recognition.onresult = function (event) {
    if (typeof event.results === 'undefined') {
      if (_this.DEBUG) {
        console.info('undefined result');
      }

      _this.recognition.stop();
      return;
    }

    for (var i = event.resultIndex; i < event.results.length; i += 1) {
      if (event.results[i].isFinal) {
        _this.finalTranscript += event.results[i][0].transcript;
      }
    }

    if (_this.finalTranscript !== '') {
      if (_this.DEBUG) {
        console.info('received command:', _this.finalTranscript);
      }

      _this.finalTranscript = _this.finalTranscript.toLowerCase().trim();
      var commands = _this.commands;
      Object.keys(commands).forEach(function (command) {
        if (typeof _this.commands[command] === 'function') {
          if (_this.finalTranscript.indexOf(command) > -1) {
            if (_this.finalTranscript[command.length] === undefined) {
              if (_this.DEBUG) {
                console.info('calling command', command);
              }
              _this.commands[command]();
            } else if (_this.finalTranscript[command.length] === ' ') {
              var param = _this.finalTranscript.substring(command.length, _this.finalTranscript.length).trim();
              _this.commands[command](param);

              if (_this.DEBUG) {
                console.info('calling command', command, 'with param:', param);
              }
            } else {
              _this.commands[command]();
            }
          }
        } else {
          if (_this.commands[command].fragments && typeof _this.commands[command].callback === 'function') {
            var snippets = JSON.parse(JSON.stringify(_this.commands[command].snippets));
            var keywords = JSON.parse(JSON.stringify(_this.commands[command].keywords));
            var startsWidthKeyword = _this.commands[command].startsWidthKeyword;
            var finalTranscript = _this.finalTranscript;
            var includes = true;
            var context = {};

            for (var k = 0; k < snippets.length; k += 1) {
              var snippet = snippets[k].toLowerCase().trim();
              if (finalTranscript.indexOf(snippet) === -1) {
                includes = false;
                break;
              }
            }

            var transcriptFromTo = void 0;

            if (includes) {
              if (startsWidthKeyword) {
                transcriptFromTo = finalTranscript.substring(finalTranscript.indexOf(snippets[0].toLowerCase()));
                var keyword = keywords[0];
                var keywordValue = finalTranscript.substring(0, finalTranscript.indexOf(snippets[0].toLowerCase()));

                if (keyword && keywordValue) {
                  context[keyword.replace('${', '').replace('}', '').trim()] = keywordValue.trim();
                }

                keywords.splice(0, 1);
              } else {
                transcriptFromTo = finalTranscript.substring(finalTranscript.indexOf(snippets[0].toLowerCase()));
              }

              var transcript = transcriptFromTo;
              for (var _i = 0; _i < snippets.length; _i += 1) {
                var _snippet = snippets[_i].trim();
                var _keyword = keywords[_i];
                transcript = transcript.trim();
                transcript = transcript.replace(new RegExp('^' + _snippet.toLowerCase(), 'gm'), '');
                var _keywordValue = void 0;
                if (_i + 1 < snippets.length) {
                  _keywordValue = transcript.substring(0, transcript.indexOf(snippets[_i + 1]));
                } else {
                  _keywordValue = transcript;
                }

                transcript = transcript.trim();
                transcript = transcript.substring(transcript.indexOf(snippets[_i + 1]));
                transcript = transcript.trim();

                if (_keyword && _keywordValue) {
                  context[_keyword.replace('${', '').replace('}', '').trim()] = _keywordValue.trim();
                }

                context.transcript = _this.finalTranscript;
              }

              _this.commands[command].callback(context);

              if (_this.DEBUG) {
                console.info('calling command: "' + command + '" with params: ', context);
              }
            }
          }
        }
      });

      _this.finalTranscript = '';
    } else {
      if (_this.DEBUG) {
        console.info('received empty command');
      }
    }
  };

  this.recognition.onerror = function (event) {
    if (_this.DEBUG) {
      console.info('error occured', event);
    }
  };

  this.recognition.onstart = function (event) {
    if (_this.DEBUG) {
      console.info('start', event);
    }

    _this.recognizing = true;
  };

  this.recognition.onend = function (event) {
    if (_this.DEBUG) {
      console.info('end', event);
    }

    _this.recognizing = false;

    if (_this.recognition.continuous) {
      if (_this.DEBUG) {
        console.info('restarting', _this.recognition.continuous);
      }

      _this.recognition.start();
    }
  };

  return this;
};

AnyControl.prototype.isSupported = function isSupported() {
  return !!this.recognition;
};

AnyControl.prototype.addCommand = function addCommand(command, callback) {
  if (this.DEBUG) {
    console.info('added command:', command);
  }

  var keywords = command.match(/\${[a-zA-Z0-9_-]*}/gim);

  if (keywords) {
    var snippets = (command.split(/\${[a-zA-Z0-9_-]*}/gim) || []).filter(function (n) {
      return n;
    }).map(function (n) {
      return n.trim();
    });
    var startsWidthKeyword = command.match(/^\${[a-zA-Z0-9_-]*}/gim) || false;
    var fragments = [];

    for (var i = 0; i < keywords.length; i += 1) {
      if (startsWidthKeyword) {
        if (keywords[i]) {
          fragments.push(keywords[i].trim());
        }

        if (snippets[i]) {
          fragments.push(snippets[i].trim().toLowerCase());
        }
      } else {
        if (snippets[i]) {
          fragments.push(snippets[i].trim().toLowerCase());
        }

        if (keywords[i]) {
          fragments.push(keywords[i].trim());
        }
      }
    }

    this.commands[command] = {
      startsWidthKeyword: startsWidthKeyword,
      snippets: snippets,
      keywords: keywords,
      fragments: fragments,
      callback: callback
    };
  } else {
    this.commands[command.toLowerCase()] = callback;
  }
};

AnyControl.prototype.removeCommand = function removeCommand(command) {
  if (this.DEBUG) {
    console.info('removed command:', command);
  }

  if (this.commands[command]) {
    delete this.commands[command];
    return true;
  }

  return false;
};

AnyControl.prototype.start = function start() {
  if (this.DEBUG) {
    console.info('started listening');
  }

  this.recognition.continuous = true;
  this.recognition.start();
};

AnyControl.prototype.stop = function stop() {
  if (this.DEBUG) {
    console.info('stopped listening');
  }

  this.recognition.continuous = false;
  this.recognition.stop();
};

AnyControl.prototype.getCommand = function getCommand() {
  var _this2 = this;

  var timeout = 1;

  if (this.isRecognizing()) {
    this.stop();

    timeout = 1000;
  }

  setTimeout(function () {
    if (_this2.DEBUG) {
      console.info('listening for single command');
    }

    _this2.recognition.continuous = false;
    _this2.recognition.start();
  }, timeout);
};

AnyControl.prototype.debug = function debug(mode) {
  this.DEBUG = !!mode;
};

AnyControl.prototype.isRecognizing = function isRecognizing() {
  return this.recognizing;
};

var main = AnyControl;
exports.default = main;

module.exports = main; // for CommonJS compatibility